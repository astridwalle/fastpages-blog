{
  
    
        "post0": {
            "title": "Intro",
            "content": "Command Mode . I don&#39;t know if it just me or if there are some other people as well, who came across the command mode quite late. So this would have saved me really a lot of time! . To enter the command mode, just press esc. . Now you can move across the cells with the arrow keys. | Enable editing of a specific cell, just by hitting enter. | Insert new cells before or after the current cell with a, b. | Change between codeand markdownwith yand m. | Deleting a cell is as easy as pressing x. | ... | . Check out https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/ for more functionalities. . Toggling code . Sometimes you like to use the notebook as a nice and clean documentation for sharing your results and maybe you don&#39;t want to disturb the viewer with long and maybe messy codecells. Then you can insert one of the following code snippets at the beginning of your notebook. . The first one is for toggling all code in the notebook # https://stackoverflow.com/questions/27934885/how-to-hide-code-from-cells-in-ipython-notebook-visualized-with-nbviewer . The second one is for toggling one specific cell by adding the command hide_toggle() at the end https://stackoverflow.com/questions/31517194/how-to-hide-one-specific-cell-input-or-output-in-ipython-notebook/48084050 . from IPython.display import HTML HTML(&#39;&#39;&#39;&lt;script&gt; code_show=true; function code_toggle() { if (code_show){ $(&#39;div.input&#39;).hide(); } else { $(&#39;div.input&#39;).show(); } code_show = !code_show } $( document ).ready(code_toggle); &lt;/script&gt; &lt;form action=&quot;javascript:code_toggle()&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Click here to toggle on/off the raw code.&quot;&gt;&lt;/form&gt;&#39;&#39;&#39;) . from IPython.display import HTML import random def hide_toggle(for_next=False): this_cell = &quot;&quot;&quot;$(&#39;div.cell.code_cell.rendered.selected&#39;)&quot;&quot;&quot; next_cell = this_cell + &#39;.next()&#39; toggle_text = &#39;Toggle show/hide&#39; # text shown on toggle link target_cell = this_cell # target cell to control with toggle js_hide_current = &#39;&#39; # bit of JS to permanently hide code in current cell (only when toggling next cell) if for_next: target_cell = next_cell toggle_text += &#39; next cell&#39; js_hide_current = this_cell + &#39;.find(&quot;div.input&quot;).hide();&#39; js_f_name = &#39;code_toggle_{}&#39;.format(str(random.randint(1,2**64))) html = &quot;&quot;&quot; &lt;script&gt; function {f_name}() {{ {cell_selector}.find(&#39;div.input&#39;).toggle(); }} {js_hide_current} &lt;/script&gt; &lt;a href=&quot;javascript:{f_name}()&quot;&gt;{toggle_text}&lt;/a&gt; &quot;&quot;&quot;.format( f_name=js_f_name, cell_selector=target_cell, js_hide_current=js_hide_current, toggle_text=toggle_text ) return HTML(html) hide_toggle() . Toggle show/hide Toggle output . Sometimes you also want to toggle the output, especially if you have created some long printings in a loop and you don&#39;t want to scroll down so much. . Therefore you have to enter the command mode again, press esc and use the shortcut esc + o. The same shortcut is used to untoggle the output. . Variable output . One great thing about jupyter-notebook is the output of all variables, including arrays and dataframes. But by default only the last statement will produce a printed output. So, in the end you will end up with lots of cells or un/commenting lines for printing several variables. But there is an easy solution - check out the following code snippet. Found on https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/ - there is also the description how to enable this permanently for all your notebooks. . from IPython.core.interactiveshell import InteractiveShell InteractiveShell.ast_node_interactivity = &quot;all&quot; hide_toggle() . Toggle show/hide a=10 b=20 c=a+b a b c . 10 . 20 . 30 . Help - man pages . By adding a ? in front of a function, you will get the documentation for this function, so no need to google it while coding. . --&gt; And if you want to close the documentation, just hit esc. . ?print . Execute shell commands . For executing shell commands, e.g. creating folders, getting filenames, you just have to preset a ! . !ls -al . total 1016 drwxr-xr-x 7 astrid staff 224 Feb 3 08:51 . drwxr-xr-x 7 astrid staff 224 Jan 26 20:10 .. drwxr-xr-x 5 astrid staff 160 Feb 3 08:22 .ipynb_checkpoints -rw-r--r--@ 1 astrid staff 485805 Feb 3 08:45 1_DataManagement.ipynb -rw-r--r-- 1 astrid staff 20686 Feb 3 08:51 Jupyter-Hacks.ipynb -rw-r--r-- 1 astrid staff 881 Feb 3 08:25 hello_world.ipynb -rw-r--r--@ 1 astrid staff 241 Feb 3 08:43 hello_world.py . Magic commands . Ipython has so called magic commands built-in, from which I find some extremely helpful! . Some more examples can also be found here: https://towardsdatascience.com/top-8-magic-commands-in-jupyter-notebook-c1582e813560 . To get an overview of all available commands, type %lsmagic. . %lsmagic . Available line magics: %alias %alias_magic %autoawait %autocall %automagic %autosave %bookmark %cat %cd %clear %colors %conda %config %connect_info %cp %debug %dhist %dirs %doctest_mode %ed %edit %env %gui %hist %history %killbgscripts %ldir %less %lf %lk %ll %load %load_ext %loadpy %logoff %logon %logstart %logstate %logstop %ls %lsmagic %lx %macro %magic %man %matplotlib %mkdir %more %mv %notebook %page %pastebin %pdb %pdef %pdoc %pfile %pinfo %pinfo2 %pip %popd %pprint %precision %prun %psearch %psource %pushd %pwd %pycat %pylab %qtconsole %quickref %recall %rehashx %reload_ext %rep %rerun %reset %reset_selective %rm %rmdir %run %save %sc %set_env %store %sx %system %tb %time %timeit %unalias %unload_ext %who %who_ls %whos %xdel %xmode Available cell magics: %%! %%HTML %%SVG %%bash %%capture %%debug %%file %%html %%javascript %%js %%latex %%markdown %%perl %%prun %%pypy %%python %%python2 %%python3 %%ruby %%script %%sh %%svg %%sx %%system %%time %%timeit %%writefile Automagic is ON, % prefix IS NOT needed for line magics. . In the following list I describe my favourite commands . %%time: Measure cell execution time | %env: set and get system environment variables | %who: show all variables of a specific type, e.g. str / int | %load: load code into your notebook (does not work with .ipynb, but with .py) | %run: execute external code (does work with .ipynb) | . %%time for i in range(1,10000): i+=1 . CPU times: user 1.31 ms, sys: 33 µs, total: 1.34 ms Wall time: 1.38 ms . %env NEW_ENV=MAGIC %env . env: NEW_ENV=MAGIC . {&#39;TERM_PROGRAM&#39;: &#39;Apple_Terminal&#39;, &#39;TERM&#39;: &#39;xterm-color&#39;, &#39;SHELL&#39;: &#39;/bin/bash&#39;, &#39;TMPDIR&#39;: &#39;/var/folders/b0/006828j97knc9z1y2jbxf57c0000gn/T/&#39;, &#39;CONDA_SHLVL&#39;: &#39;1&#39;, &#39;CONDA_PROMPT_MODIFIER&#39;: &#39;(base) &#39;, &#39;TERM_PROGRAM_VERSION&#39;: &#39;440&#39;, &#39;TERM_SESSION_ID&#39;: &#39;692799A3-08CC-4B2B-AA6E-F76D9DCA9312&#39;, &#39;USER&#39;: &#39;astrid&#39;, &#39;CONDA_EXE&#39;: &#39;/Users/astrid/opt/anaconda3/bin/conda&#39;, &#39;SSH_AUTH_SOCK&#39;: &#39;/private/tmp/com.apple.launchd.tRpoCDVVO2/Listeners&#39;, &#39;AWS_PROFILE&#39;: &#39;admin&#39;, &#39;_CE_CONDA&#39;: &#39;&#39;, &#39;PATH&#39;: &#39;/Users/astrid/opt/anaconda3/bin:/Users/astrid/opt/anaconda3/condabin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/Applications/Postgres.app/Contents/Versions/latest/bin:/Users/astrid/local/bin&#39;, &#39;LaunchInstanceID&#39;: &#39;0F4231B1-0052-4D2E-A19D-0A0A8F42DE3C&#39;, &#39;CONDA_PREFIX&#39;: &#39;/Users/astrid/opt/anaconda3&#39;, &#39;__CFBundleIdentifier&#39;: &#39;com.apple.Terminal&#39;, &#39;PWD&#39;: &#39;/Users/astrid/work/CFDsolutions/Verfahrenstechnik_TUB/Mini_AI_Gym/1_DataManagement&#39;, &#39;XPC_FLAGS&#39;: &#39;0x0&#39;, &#39;_CE_M&#39;: &#39;&#39;, &#39;XPC_SERVICE_NAME&#39;: &#39;0&#39;, &#39;HOME&#39;: &#39;/Users/astrid&#39;, &#39;SHLVL&#39;: &#39;1&#39;, &#39;CONDA_PYTHON_EXE&#39;: &#39;/Users/astrid/opt/anaconda3/bin/python&#39;, &#39;LOGNAME&#39;: &#39;astrid&#39;, &#39;LC_CTYPE&#39;: &#39;UTF-8&#39;, &#39;CONDA_DEFAULT_ENV&#39;: &#39;base&#39;, &#39;SECURITYSESSIONID&#39;: &#39;186ab&#39;, &#39;_&#39;: &#39;/Users/astrid/opt/anaconda3/bin/jupyter-notebook&#39;, &#39;KERNEL_LAUNCH_TIMEOUT&#39;: &#39;40&#39;, &#39;JPY_PARENT_PID&#39;: &#39;4177&#39;, &#39;CLICOLOR&#39;: &#39;1&#39;, &#39;PAGER&#39;: &#39;cat&#39;, &#39;GIT_PAGER&#39;: &#39;cat&#39;, &#39;MPLBACKEND&#39;: &#39;module://ipykernel.pylab.backend_inline&#39;, &#39;NEW_ENV&#39;: &#39;MAGIC&#39;} . %who int . b c i . %load ./hello_world.py . hello world . %run ./hello_world.ipynb . hello world . Virtual Environments w/ Jupyter . Python and PYthon packages are quite volatile and dynamic. So depending on versions packages might be or migt not be compatible. Virtual environemnts are very common to ensure a stable python env for your current project with the needed packages without breaking your systemwide python installation. . Setting up the venv is well known . python3 -m venv --system-site-packages NAME_ENV . But if you use jupyter-notebooks a lot for development, you want to use the same environemnts also in your notebooks: . pip install --user ipykernel python -m ipykernel install --user --name=myenv source env/bin/activate .",
            "url": "https://astridwalle.github.io/fastpages-blog/2021/02/03/Jupyter-Hacks.html",
            "relUrl": "/2021/02/03/Jupyter-Hacks.html",
            "date": " • Feb 3, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://astridwalle.github.io/fastpages-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://astridwalle.github.io/fastpages-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://astridwalle.github.io/fastpages-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://astridwalle.github.io/fastpages-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}